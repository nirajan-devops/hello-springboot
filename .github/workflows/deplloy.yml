## hello-springboot/.github/workflows/deploy.yml
name: Build & Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:       # manual trigger

jobs:
## ────────────────────────────────────────────────────────────
# 1) BUILD JAR ON RUNNER
# ────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Maven
        run: |
          chmod +x ./mvnw          # just in case
          ./mvnw clean package --no-transfer-progress

      - name: Upload artifact (JAR + Dockerfile)
        uses: actions/upload-artifact@v4
        with:
          name: springboot-build
          path: |
            target/*.jar
            Dockerfile
# ────────────────────────────────────────────────────────────
# 2) DEPLOY ON EC2
# ────────────────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-build

      # Copy files up to EC2
      - name: Debug raw SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key && chmod 600 key
          ssh -o StrictHostKeyChecking=no -i key ${{ secrets.USERNAME }}@${{ secrets.HOST }} "echo OK_FROM_EC2"

      - name: Copy JAR & Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.jar,Dockerfile"
          target: "/home/${{ secrets.USERNAME }}/app"

      # SSH in and build/run container
      - name: SSH‑Deploy on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # 1) Make sure Docker is present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker…"
              if [ -f /etc/debian_version ]; then
                # Ubuntu / Debian
                sudo apt-get update -y
                sudo apt-get install -y docker.io
              else
                # Amazon Linux
                sudo yum update -y
                sudo amazon-linux-extras install docker -y
              fi
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER
            fi

            # 2) Build image & (re)run container
            cd /home/${{ secrets.USERNAME }}/app
            CONTAINER=hello-springboot
            IMAGE=$CONTAINER:latest

            docker stop   $CONTAINER || true
            docker rm     $CONTAINER || true
            docker build -t $IMAGE .
            docker run -d --name $CONTAINER -p 8080:8080 $IMAGE

            echo "✅ Deployed and running on port 8080"
