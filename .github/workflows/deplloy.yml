# hello-springboot/.github/workflows/deploy.yml
name: Build & Deploy to AWS EC2
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # (unchanged build / upload‑artifact steps …)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-build

      # 1) Write SSH key to disk (keeps newlines perfect)
      - name: Write private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa

      # 2) Copy files to EC2
      - name: Copy JAR & Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host:     ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key_path: id_rsa                 # ← use file, not string
          source:   "*.jar,Dockerfile"
          target:   "/home/${{ secrets.USERNAME }}/app"

      # 3) SSH and deploy
      - name: SSH‑Deploy on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host:     ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key_path: id_rsa                 # ← same file
          script: |
            set -e
            if ! command -v docker &>/dev/null; then
              echo "🔧 Installing Docker …"
              if [ -f /etc/debian_version ]; then
                sudo apt-get update -y
                sudo apt-get install -y docker.io
              else
                sudo yum update -y
                sudo amazon-linux-extras install docker -y
              fi
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER
            fi

            cd /home/${{ secrets.USERNAME }}/app
            CONTAINER=hello-springboot
            IMAGE=$CONTAINER:latest
            docker stop $CONTAINER 2>/dev/null || true
            docker rm   $CONTAINER 2>/dev/null || true
            docker build -t $IMAGE .
            docker run -d --name $CONTAINER -p 8080:8080 $IMAGE
            echo "✅ Deployed and running on port 8080"
